{"version":3,"sources":["Sweeper.js","Game.js"],"names":["SWEEPER","gameArea","undefined","buttons","start","reset","inputs","rows","cols","mines","MAX_ROWS","MAX_COLS","MIN_ROWS","MIN_COLS","NUM_ROWS","NUM_COLS","MINES","MAX_MINES","MIN_MINES","NUM_MINES","getGameArea","this","init","sweeperOptions","setOptions","_checkElements","e","swal","title","text","message","icon","button","visible","closeOnClickOutside","closeOnEsc","options","key","hasOwnProperty","startGame","_checkConfig","game","html","Game","attr","resetGame","Error","_configElements","self","on","_handleStartButtonClick","$","_handleResetButtonClick","values","_handleRowsInputChange","trigger","_handleColsInputChange","_handleMinesInputChange","document","oncontextmenu","event","cancelBubble","returnValue","onmousedown","input","curValue","parseInt","val","_handleNumOfMines","Math","floor","numRows","numCols","numMines","restMines","isGameStarted","isGameFinished","isFirstClick","timeCount","timerId","mainContainer","functionBar","functionPanel","leftBox","rightBox","middleBox","faceButton","mineArea","mineTable","prototype","constructor","getNumRows","getNumCols","getNumMines","BLOCK_TYPE_DEFAULT","BLOCK_TYPE_MINE","MOUSE_BUTTON_LEFT","MOUSE_BUTTON_MIDDLE","MOUSE_BUTTON_RIGHT","GAME_OVER_WIN","GAME_OVER_LOST","GAME_OVER_TIMEOUT","_createMainContainer","fullWidth","createElement","className","style","width","_createFunctionBar","_createMineArea","append","_refreshMainContainer","clearInterval","innerText","appendChild","_createFaceButton","buttonContainer","height","innerHTML","setAttribute","gameSelf","onmouseout","getAttribute","onmouseup","i","j","index","tempTr","tempTd","mineButton","mineTableBody","tempArray","_initMineArea","_createMineButton","mineValue","mineIndex","tempValue","expanded","marked","detected","mine","id","_beginTimer","toString","checkGameStatus","removeChild","firstChild","tempX","tempY","tempIndex","curMine","curIndex","curY","curX","round","getElementById","markedCount","expandCover","divIndex","_expandMineArea","hasChildNodes","gameOver","playerWon","result","state","_expandAll","window","setInterval","source","accumulate","k","l","minesArray","Array","minesPos","random","temp","curPos"],"mappings":"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","file":"sweeper.min.js","sourcesContent":["var SWEEPER = {\n    // Elements for configuration and events\n    gameArea: undefined,\n    buttons: {\n        start: undefined,\n        reset: undefined\n    },\n    inputs: {\n        rows: undefined,\n        cols: undefined,\n        mines: undefined\n    },\n\n    // Rows and columns\n    MAX_ROWS: 50,\n    MAX_COLS: 50,\n    MIN_ROWS: 8,\n    MIN_COLS: 8,\n    NUM_ROWS: undefined,\n    NUM_COLS: undefined,\n\n    // Mines\n    MINES: [],\n    MAX_MINES: undefined,\n    MIN_MINES: 8,\n    NUM_MINES: undefined\n};\n\n/**\n * @returns {jQuery}\n */\nSWEEPER.getGameArea = function ()\n{\n    return this.gameArea;\n};\n\n/**\n * @param {object} sweeperOptions\n */\nSWEEPER.init = function (sweeperOptions)\n{\n    if (typeof sweeperOptions === 'object')\n    {\n        this.setOptions(sweeperOptions);\n    }\n\n    try\n    {\n        this._checkElements();\n    }\n    catch (e)\n    {\n        swal({\n            title: 'Failed to start elements!',\n            text: e.message,\n            icon: 'error',\n            button: {\n                visible: false\n            },\n            closeOnClickOutside: false,\n            closeOnEsc: false\n        });\n    }\n};\n\n/**\n * @param {object} options\n */\nSWEEPER.setOptions = function (options)\n{\n    for (var key in options)\n    {\n        if (options.hasOwnProperty(key))\n        {\n            if (this.hasOwnProperty(key))\n            {\n                this[key] = options[key];\n            }\n        }\n    }\n};\n\nSWEEPER.startGame = function ()\n{\n    try\n    {\n        this._checkConfig();\n\n        if (typeof this.game === 'undefined')\n        {\n            SWEEPER.gameArea.html('');\n            this.game = new SWEEPER.Game(this.NUM_ROWS, this.NUM_COLS, this.NUM_MINES);\n            this.game.init();\n        }\n\n        this.buttons.start.attr('disabled', true);\n    }\n    catch (e)\n    {\n        swal({\n            title: 'Failed to start the game!',\n            text: e.message,\n            icon: 'error'\n        });\n    }\n};\n\nSWEEPER.resetGame = function()\n{\n    if (typeof this.game !== 'undefined')\n    {\n        this.game.reset();\n    }\n};\n\nSWEEPER._checkConfig = function ()\n{\n    if (typeof this.NUM_ROWS !== 'number')\n    {\n        throw Error('Number of rows is not a valid number!');\n    }\n    if (typeof this.NUM_COLS !== 'number')\n    {\n        throw Error('Number of columns is not a valid number!');\n    }\n    if (typeof this.NUM_MINES !== 'number')\n    {\n        throw Error('Number of mines is not a valid number!');\n    }\n};\n\n/**\n * Function responsible to check that the necessary HTML elements are present on the page.\n * @private\n */\nSWEEPER._checkElements = function ()\n{\n    if (typeof this.gameArea === 'undefined')\n    {\n        throw Error('Game area has not been defined!');\n    }\n\n    // Buttons\n    if (typeof this.buttons.start === 'undefined')\n    {\n        throw Error('No start button has been set!');\n    }\n    if (typeof this.buttons.reset === 'undefined')\n    {\n        throw Error('No reset button has been set!');\n    }\n\n    // Inputs\n    if (typeof this.inputs.rows === 'undefined')\n    {\n        throw Error('No input element for number of rows!');\n    }\n    if (typeof this.inputs.cols === 'undefined')\n    {\n        throw Error('No input element for number of columns!');\n    }\n    if (typeof this.inputs.mines === 'undefined')\n    {\n        throw Error('No input element for number of mines!');\n    }\n\n    this._configElements();\n};\n\n/**\n * Function to configure the elements on page after they have been configured properly.\n * @private\n */\nSWEEPER._configElements = function ()\n{\n    var self = this;\n\n    // Buttons\n    this.buttons.start.on('click', function (e)\n    {\n        self._handleStartButtonClick($(this), e);\n    });\n    this.buttons.reset.on('click', function (e)\n    {\n        self._handleResetButtonClick($(this), e);\n    });\n\n    // Inputs\n    this.inputs.values = {};\n    this.inputs.values.rows = $('#num-rows-value');\n    this.inputs.values.cols = $('#num-cols-value');\n    this.inputs.values.mines = $('#num-mines-value');\n\n    this.inputs.rows.on('input', function (e)\n    {\n        self._handleRowsInputChange($(this), e);\n    });\n    this.inputs.rows.trigger('input');\n    this.inputs.cols.on('input', function (e)\n    {\n        self._handleColsInputChange($(this), e);\n    });\n    this.inputs.cols.trigger('input');\n    this.inputs.mines.on('input', function (e)\n    {\n        self._handleMinesInputChange($(this), e);\n    });\n    this.inputs.mines.trigger('input');\n\n    // Disable right-click and context menus\n    document.oncontextmenu = function(event)\n    {\n        event.cancelBubble = true;\n        event.returnValue = false;\n        return false;\n    };\n    document.onmousedown = function(event)\n    {\n        if (event.button === 2 || event.button === 3)\n        {\n            event.cancelBubble = true;\n            event.returnValue = false;\n            return false;\n        }\n    };\n};\n\n/**\n * Handle the click event of the start button.\n * @param {jQuery} button\n * @param {MouseEvent} event\n * @private\n */\nSWEEPER._handleStartButtonClick = function (button, event)\n{\n    // Start the game\n    this.startGame();\n};\n\n/**\n * Handle the click event of the reset button.\n * @param {jQuery} button\n * @param {MouseEvent} event\n * @private\n */\nSWEEPER._handleResetButtonClick = function (button, event)\n{\n    this.resetGame();\n};\n\n/**\n * Handle the change (input) event of the rows slider.\n * @param {jQuery} input\n * @param {MouseEvent} event\n * @private\n */\nSWEEPER._handleRowsInputChange = function (input, event)\n{\n    var curValue = parseInt(input.val(), 10);\n    if (curValue < this.MIN_ROWS)\n    {\n        curValue = this.MIN_ROWS;\n    }\n    else if (curValue > this.MAX_ROWS)\n    {\n        curValue = this.MAX_ROWS;\n    }\n\n    this.NUM_ROWS = curValue;\n\n    this.inputs.rows.val(this.NUM_ROWS);\n    this.inputs.values.rows.text(this.NUM_ROWS);\n\n    this._handleNumOfMines();\n};\n\n/**\n * Handle the change (input) event of the columns slider.\n * @param {jQuery} input\n * @param {MouseEvent} event\n * @private\n */\nSWEEPER._handleColsInputChange = function (input, event)\n{\n    var curValue = parseInt(input.val(), 10);\n    if (curValue < this.MIN_COLS)\n    {\n        curValue = this.MIN_COLS;\n    }\n    else if (curValue > this.MAX_COLS)\n    {\n        curValue = this.MAX_COLS;\n    }\n\n    this.NUM_COLS = curValue;\n\n    this.inputs.cols.val(this.NUM_COLS);\n    this.inputs.values.cols.text(this.NUM_COLS);\n\n    this._handleNumOfMines();\n};\n\n/**\n * Function used to determine how many mines the board can display.\n * @private\n */\nSWEEPER._handleNumOfMines = function ()\n{\n    // Calculate maximum amount of mines floor(rows * cols / 2)\n    this.MAX_MINES = Math.floor(this.NUM_ROWS * this.NUM_COLS / 2);\n    if (this.NUM_MINES > this.MAX_MINES)\n    {\n        this.NUM_MINES = this.MAX_MINES;\n    }\n\n    this.inputs.mines.attr('max', this.MAX_MINES);\n\n    this.inputs.mines.trigger('input');\n};\n\n/**\n * Handle the change (input) event of the mines slider.\n * @param {jQuery} input\n * @param {MouseEvent} event\n * @private\n */\nSWEEPER._handleMinesInputChange = function (input, event)\n{\n    var curValue = parseInt(input.val(), 10);\n    if (curValue < this.MIN_MINES)\n    {\n        curValue = this.MIN_MINES;\n    }\n    else if (curValue > this.MAX_MINES)\n    {\n        curValue = this.MAX_MINES;\n    }\n\n    this.NUM_MINES = curValue;\n\n    this.inputs.mines.val(this.NUM_MINES);\n    this.inputs.values.mines.text(this.NUM_MINES + ' (Max: ' + this.MAX_MINES + ')');\n};","/**\n * @param {number} numRows\n * @param {number} numCols\n * @param {number} numMines\n * @constructor\n */\nSWEEPER.Game = function (numRows, numCols, numMines)\n{\n    this.numRows = numRows;\n    this.numCols = numCols;\n    this.numMines = numMines;\n    this.restMines = numMines;\n\n    this.isGameStarted = false;\n    this.isGameFinished = false;\n    this.isFirstClick = false;\n\n    this.timeCount = 0;\n    this.timerId = undefined;\n\n    // Elements\n    this.mainContainer = undefined;\n    this.functionBar = undefined;\n    this.functionPanel = undefined;\n    this.leftBox = undefined;\n    this.rightBox = undefined;\n    this.middleBox = undefined;\n    this.faceButton = undefined;\n    this.mineArea = undefined;\n    this.mineTable = undefined;\n};\nSWEEPER.Game.prototype.constructor = SWEEPER.Game;\n\n/**\n * @returns {number}\n */\nSWEEPER.Game.prototype.getNumRows = function ()\n{\n    return this.numRows;\n};\n\n/**\n * @returns {number}\n */\nSWEEPER.Game.prototype.getNumCols = function ()\n{\n    return this.numCols;\n};\n\n/**\n * @returns {number}\n */\nSWEEPER.Game.prototype.getNumMines = function ()\n{\n    return this.numMines;\n};\n\n/**\n * @type {number}\n */\nSWEEPER.Game.BLOCK_TYPE_DEFAULT = 0;\n\n/**\n * @type {number}\n */\nSWEEPER.Game.BLOCK_TYPE_MINE = 9;\n\n/**\n * @type {number}\n */\nSWEEPER.Game.MOUSE_BUTTON_LEFT = 0;\n\n/**\n * @type {number}\n */\nSWEEPER.Game.MOUSE_BUTTON_MIDDLE = 1;\n\n/**\n * @type {number}\n */\nSWEEPER.Game.MOUSE_BUTTON_RIGHT = 2;\n\n/**\n * @type {number}\n */\nSWEEPER.Game.GAME_OVER_WIN = 0;\n\n/**\n * @type {number}\n */\nSWEEPER.Game.GAME_OVER_LOST = 1;\n\n/**\n * @type {number}\n */\nSWEEPER.Game.GAME_OVER_TIMEOUT = 2;\n\n/**\n * Function called to start the set-up of game\n */\nSWEEPER.Game.prototype.init = function ()\n{\n    // Type checking\n    if (typeof this.getNumRows() !== 'number')\n    {\n        throw Error('The number of rows is not a number!');\n    }\n    if (typeof this.getNumCols() !== 'number')\n    {\n        throw Error('The number of columns is not a number!');\n    }\n    if (typeof this.getNumMines() !== 'number')\n    {\n        throw Error('The number of mines is not a number!');\n    }\n\n    this._createMainContainer();\n};\n\n/**\n * Function that creates the main container.\n * @private\n */\nSWEEPER.Game.prototype._createMainContainer = function ()\n{\n    // Each mine 18px + panel border + 3px + main_container's border 6px // TODO MAKE SIZES PROGRAMMATIC\n    var fullWidth = 24 * this.getNumCols() + 14;\n\n    // Main Container creation\n    this.mainContainer = document.createElement('div');\n    this.mainContainer.className = 'main_container';\n    this.mainContainer.style.width = fullWidth + 'px';\n\n    // Function Bar\n    this._createFunctionBar();\n\n    // Mine Area\n    this._createMineArea();\n\n    SWEEPER.getGameArea().append(this.mainContainer);\n};\n\nSWEEPER.Game.prototype.reset = function ()\n{\n    this._refreshMainContainer();\n};\n\nSWEEPER.Game.prototype._refreshMainContainer = function ()\n{\n    this.isGameStarted = false;\n    this.isGameFinished = false;\n    this.isFirstClick = false;\n\n    clearInterval(this.timerId);\n    this.timeCount = 0;\n\n    this.restMines = this.getNumMines();\n\n    SWEEPER.getGameArea().html('');\n\n    this._createMainContainer();\n};\n\n/**\n * Creates the function bar displayed at the top.\n * @private\n */\nSWEEPER.Game.prototype._createFunctionBar = function ()\n{\n    // Function bar\n    this.functionBar = document.createElement('div');\n    this.functionBar.className = 'function_bar_div';\n\n    // Function panel\n    this.functionPanel = document.createElement('div');\n    this.functionPanel.className = 'panel_down_div';\n\n    // Left box\n    this.leftBox = document.createElement('div');\n    this.leftBox.className = 'function_left_div';\n    this.leftBox.innerText = '' + this.getNumMines();\n    this.functionPanel.appendChild(this.leftBox);\n\n    // Right box\n    this.rightBox = document.createElement('div');\n    this.rightBox.className = 'function_right_div';\n    this.rightBox.innerText = '0';\n    this.functionPanel.appendChild(this.rightBox);\n\n    // Middle box\n    this.middleBox = document.createElement('div');\n    this.middleBox.className = 'function_mid_div';\n    // Face button\n    this._createFaceButton();\n    this.functionPanel.appendChild(this.middleBox);\n\n    this.functionBar.appendChild(this.functionPanel);\n    this.mainContainer.appendChild(this.functionBar);\n};\n\n/**\n * Creates the face button that displays the game state to the user.\n * @private\n */\nSWEEPER.Game.prototype._createFaceButton = function ()\n{\n    var buttonContainer = document.createElement('div');\n    buttonContainer.className = 'container_border';\n    buttonContainer.style.width = '30px';\n\n    this.faceButton = document.createElement('div');\n    this.faceButton.className = 'img_button_up';\n    this.faceButton.style.width = '25px';\n    this.faceButton.style.height = '25px';\n    this.faceButton.innerHTML = '<i class=\"fa fa-smile-o\"></i>';\n\n    // Set whether the button is pushed/paused\n    this.faceButton.setAttribute('pushed', false);\n\n    // Event listeners\n    var gameSelf = this;\n    this.faceButton.onmousedown = function ()\n    {\n        this.className = 'img_button_down';\n        this.setAttribute('pushed', true);\n    };\n    this.faceButton.onmouseout = function ()\n    {\n        if (this.getAttribute('pushed') === 'true')\n        {\n            this.className = 'img_button_up';\n            this.setAttribute('pushed', false);\n        }\n    };\n    this.faceButton.onmouseup = function ()\n    {\n        if (this.getAttribute('pushed') === 'false')\n        {\n            return false;\n        }\n        this.className = 'img_button_up';\n        this.setAttribute('pushed', false);\n        gameSelf._refreshMainContainer();\n    };\n\n    buttonContainer.appendChild(this.faceButton);\n    this.middleBox.appendChild(buttonContainer);\n};\n\n/**\n * Creates the main mine play area.\n * @private\n */\nSWEEPER.Game.prototype._createMineArea = function ()\n{\n    var i, j, index;\n    var tempTr, tempTd, mineButton;\n\n    // Mine Area\n    this.mineArea = document.createElement('div');\n    this.mineArea.className = 'panel_down_nopadding_div';\n\n    // Mine Table\n    this.mineTable = document.createElement('table');\n    this.mineTable.className = 'mine_area_table';\n\n    var mineTableBody = document.createElement('tbody');\n\n    var tempArray = this._initMineArea(this.getNumRows(), this.getNumCols(), this.getNumMines());\n\n    for (i = 0; i < this.getNumRows(); i++)\n    {\n        tempTr = document.createElement('tr');\n        for (j = 0; j < this.getNumCols(); j++)\n        {\n            tempTd = document.createElement('td');\n            index = i * this.getNumCols() + j;\n\n            mineButton = this._createMineButton(tempArray[index], index);\n            tempTd.appendChild(mineButton);\n            tempTr.appendChild(tempTd);\n        }\n        mineTableBody.appendChild(tempTr);\n    }\n    this.mineTable.appendChild(mineTableBody);\n\n    this.mineArea.appendChild(this.mineTable);\n\n    this.mainContainer.appendChild(this.mineArea);\n};\n\nSWEEPER.Game.prototype._createMineButton = function (mineValue, mineIndex)\n{\n    var mine = document.createElement('div');\n    var tempValue; // Value under current block\n    var expanded, marked, detected; // Flags for guesses\n\n    mine.id = 'mine_' + mineIndex;\n    mine.className = 'mine_up';\n    mine.style.width = '18px';\n    mine.style.height = '18px';\n    mine.setAttribute('mine_value', mineValue);\n    mine.setAttribute('mine_index', mineIndex);\n\n    // State of mine\n    mine.setAttribute('marked', false);\n    mine.setAttribute('opened', false);\n    mine.setAttribute('expanded', false);\n    mine.setAttribute('pushed', false);\n    mine.setAttribute('detected', false);\n\n    // mine.innerText = mineValue; // TODO TESTING ONLY\n\n    // Event handlers\n    var gameSelf = this;\n\n    mine.onmousedown = function (event)\n    {\n        // If game finished - do nothing\n        if (gameSelf.isGameFinished)\n        {\n            return false;\n        }\n\n        // Left button\n        if (event.button === SWEEPER.Game.MOUSE_BUTTON_LEFT)\n        {\n            // Do not respond to expanded and marked mines\n            if ((this.getAttribute('marked') === 'true') ||\n                (this.getAttribute('expanded') === 'true'))\n            {\n                return false;\n            }\n            this.setAttribute('pushed', true);\n            this.className = 'mine_down';\n        }\n\n        // Right button\n        if (event.button === SWEEPER.Game.MOUSE_BUTTON_RIGHT)\n        {\n            // Start timer\n            gameSelf._beginTimer();\n\n            expanded = this.getAttribute('expanded');\n            if (expanded === 'false')\n            {\n                detected = this.getAttribute('detected');\n                marked = this.getAttribute('marked');\n                this.className = 'mine_up';\n                if (marked === 'false')\n                {\n                    if (detected === 'true')\n                    {\n                        this.setAttribute('detected', false);\n                        this.innerText = '';\n                        return false;\n                    }\n\n                    // Mark as mine\n                    this.innerHTML = '<i class=\"fa fa-flag\"></i>';\n\n                    // Avoid recreate\n                    this.setAttribute('marked', true);\n\n                    gameSelf.restMines--;\n                    gameSelf.leftBox.innerText = gameSelf.restMines.toString();\n                    gameSelf.checkGameStatus();\n                }\n                else\n                {\n                    // Set guess flag\n                    gameSelf.restMines++;\n                    gameSelf.leftBox.innerText = gameSelf.restMines.toString();\n\n                    // Clear the mark\n                    this.removeChild(this.firstChild);\n                    this.setAttribute('marked', false);\n\n                    if (detected === 'false')\n                    {\n                        this.setAttribute('detected', true);\n                        this.innerText = '?';\n                        this.className = 'mine_up';\n                    }\n                    else\n                    {\n                        this.setAttribute('detected', false);\n                    }\n                }\n\n            }\n        }\n\n        // Middle button\n        if (event.button === SWEEPER.Game.MOUSE_BUTTON_MIDDLE)\n        {\n            // Detect the surrounding blocks\n            if ((this.getAttribute('expanded') === 'false') &&\n                (this.getAttribute('marked') === 'false'))\n            {\n                this.className = 'mine_down';\n            }\n            // Avoid left mouse interference\n            this.setAttribute('pushed', false);\n            this.setAttribute('detecting', true);\n\n            // Change visual of surrounding blocks\n            var numCols = gameSelf.getNumCols();\n            var numRows = gameSelf.getNumRows();\n            var curIndex = parseInt(mine.getAttribute('mine_index'), 10);\n            var curY = curIndex % numCols;\n            var curX = Math.round((curIndex - curY) / numCols);\n\n            var tempX, tempY, tempIndex, curMine;\n            for (var i = -1; i <= 1; i++)\n            {\n                tempX = curX + i;\n                if (tempX < 0 || tempX > (numRows - 1))\n                {\n                    continue;\n                }\n                for (var j = -1; j <= 1; j++)\n                {\n                    tempY = curY + j;\n                    if (tempY > (numCols - 1) || tempY < 0)\n                    {\n                        continue;\n                    }\n                    tempIndex = tempX * numCols + tempY;\n                    curMine = document.getElementById('mine_' + tempIndex);\n                    if ((curMine !== null) &&\n                        (curMine.getAttribute('marked') === 'false') &&\n                        (curMine.getAttribute('expanded') === 'false') &&\n                        (curMine.getAttribute('detected') === 'false'))\n                    {\n                        curMine.className = 'mine_down';\n                    }\n                }\n            }\n        }\n    };\n\n    mine.onmouseout = function (event)\n    {\n        if (gameSelf.isGameFinished)\n        {\n            return false;\n        }\n\n        if (this.getAttribute('pushed') === 'true')\n        {\n            this.className = 'mine_up';\n            this.setAttribute('pushed', 'false');\n        }\n\n        if (this.getAttribute('detecting') === 'true')\n        {\n            if (this.getAttribute('expanded') === 'false' && this.getAttribute('marked') === 'false')\n            {\n                this.className = 'mine_up';\n            }\n            this.setAttribute('detecting', false);\n            // Restore the visual style of the surrounding blocks\n            var numCols = gameSelf.getNumCols();\n            var numRows = gameSelf.getNumRows();\n            var curIndex = parseInt(this.getAttribute('mine_index'), 10);\n            var curY = curIndex % numCols;\n            var curX = Math.round((curIndex - curY) / numCols);\n\n            var tempX, tempY, tempIndex, curMine;\n            for (var i = -1; i <= 1; i++)\n            {\n                tempX = curX + i;\n                if (tempX < 0 || tempX > (numRows - 1))\n                {\n                    continue;\n                }\n                for (j = -1; j <= 1; j++)\n                {\n                    tempY = curY + j;\n                    if (tempY > (numCols - 1) || tempY < 0)\n                    {\n                        continue;\n                    }\n                    tempIndex = tempX * numCols + tempY;\n                    curMine = document.getElementById('mine_' + tempIndex);\n                    if ((curMine !== null) &&\n                        (curMine.getAttribute('marked') === 'false') &&\n                        (curMine.getAttribute('expanded') === 'false'))\n                    {\n                        curMine.className = 'mine_up';\n                    }\n                }\n            }\n        }\n    };\n\n    mine.onmouseup = function (event)\n    {\n        if (gameSelf.isGameFinished)\n        {\n            return false;\n        }\n\n        // Is detecting happening?\n        if (this.getAttribute('detecting') === 'true')\n        {\n            if ((this.getAttribute('expanded') === 'false') &&\n                (this.getAttribute('marked') === 'false'))\n            {\n                this.className = 'mine_up';\n            }\n            this.setAttribute('detecting', false);\n\n            // Surrounding mark doesn't match the number then restore visual style\n            var numCols = gameSelf.getNumCols();\n            var numRows = gameSelf.getNumRows();\n            var curIndex = parseInt(this.getAttribute('mine_index'), 10);\n            var curY = curIndex % numCols;\n            var curX = Math.round((curIndex - curY) / numCols);\n            var tempX, tempY, tempIndex, curMine, i, j;\n            var markedCount = 0;\n\n            if (this.getAttribute('expanded') === 'true')\n            {\n                for (i = -1; i <= 1; i++)\n                {\n                    tempX = curX + i;\n                    if (tempX < 0 || tempX > (numRows - 1))\n                    {\n                        continue;\n                    }\n                    for (j = -1; j <= 1; j++)\n                    {\n                        tempY = curY + j;\n                        if (tempY > (numCols - 1) || tempY < 0)\n                        {\n                            continue;\n                        }\n                        tempIndex = tempX * numCols + tempY;\n                        curMine = document.getElementById('mine_' + tempIndex);\n                        if ((curMine !== null) &&\n                            (curMine.getAttribute('marked') === 'true'))\n                        {\n                            markedCount++;\n                        }\n                    }\n                }\n                if (markedCount === parseInt(this.getAttribute('mine_value'), 10))\n                {\n                    // Expand the unexpanded blocks\n                    for (i = -1; i <= 1; i++)\n                    {\n                        tempX = curX + i;\n                        if (tempX < 0 || tempX > (numRows - 1))\n                        {\n                            continue;\n                        }\n                        for (j = -1; j <= 1; j++)\n                        {\n                            tempY = curY + j;\n                            if (tempY > (numCols - 1) || tempY < 0)\n                            {\n                                continue;\n                            }\n                            tempIndex = tempX * numCols + tempY;\n                            curMine = document.getElementById('mine_' + tempIndex);\n                            if ((curMine !== null) &&\n                                (curMine.getAttribute('marked') === 'false') &&\n                                (curMine.getAttribute('expanded') === 'false'))\n                            {\n                                curMine.setAttribute('pushed', true);\n                                curMine.expandCover();\n                            }\n                        }\n                    }\n                    return false;\n                }\n            }\n            for (i = -1; i <= 1; i++)\n            {\n                tempX = curX + i;\n                if (tempX < 0 || tempX > (numRows - 1))\n                {\n                    continue;\n                }\n                for (j = -1; j <= 1; j++)\n                {\n                    tempY = curY + j;\n                    if (tempY > (numCols - 1) || tempY < 0)\n                    {\n                        continue;\n                    }\n                    tempIndex = tempX * numCols + tempY;\n                    curMine = document.getElementById('mine_' + tempIndex);\n                    if ((curMine !== null) &&\n                        (curMine.getAttribute('marked') === 'false') &&\n                        (curMine.getAttribute('expanded') === 'false'))\n                    {\n                        curMine.className = 'mine_up';\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Left button\n        if (event.button === SWEEPER.Game.MOUSE_BUTTON_LEFT)\n        {\n            this.expandCover();\n        }\n    };\n\n    mine.expandCover = function ()\n    {\n        if (gameSelf.isGameFinished)\n        {\n            return false;\n        }\n\n        // If mouse has moved out do nothing\n        if (this.getAttribute('pushed') === 'false')\n        {\n            return false;\n        }\n        this.setAttribute('pushed', false);\n\n        // First time click\n        if (!gameSelf.isFirstClick)\n        {\n            gameSelf.isFirstClick = true;\n            tempValue = parseInt(this.getAttribute('mine_value'), 10);\n            if (tempValue === SWEEPER.Game.BLOCK_TYPE_MINE)\n            {\n                // If first click is mine - re-generate the mine position\n                var curIndex = parseInt(this.getAttribute('mine_index'), 10);\n                var numCols = gameSelf.getNumCols();\n                var numRows = gameSelf.getNumRows();\n                var numMines = gameSelf.getNumMines();\n                var tempArray = gameSelf._initMineArea(numRows, numCols, numMines, curIndex);\n                var divIndex, mineDiv;\n                for (divIndex = 0; divIndex < (numRows * numCols); divIndex++)\n                {\n                    mineDiv = document.getElementById('mine_' + divIndex);\n                    mineDiv.setAttribute('mine_value', tempArray[divIndex]);\n                }\n            }\n        }\n\n        gameSelf._beginTimer();\n\n        if ((this.getAttribute('marked') === 'true') ||\n            (this.getAttribute('expanded') === 'true'))\n        {\n            return false;\n        }\n        this.setAttribute('detected', false);\n\n        tempValue = parseInt(this.getAttribute('mine_value'), 10);\n        switch (tempValue)\n        {\n            case SWEEPER.Game.BLOCK_TYPE_DEFAULT: // Nothing\n                curIndex = parseInt(this.getAttribute('mine_index'), 10);\n                this.innerText = '';\n                gameSelf._expandMineArea(curIndex);\n                break;\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                this.className = 'mine_down_' + tempValue;\n                this.setAttribute('expanded', true);\n                this.innerText = tempValue.toString();\n                break;\n            case SWEEPER.Game.BLOCK_TYPE_MINE: // Found mine\n                this.className = 'mine_down_bomb_blast';\n                this.setAttribute('expanded', true);\n                // Check whether exploded\n                if (this.getAttribute('opened') === 'false')\n                {\n                    // Avoid re-creation\n                    if (this.hasChildNodes())\n                    {\n                        this.removeChild(this.firstChild);\n                    }\n\n                    this.innerHTML = '<i class=\"fa fa-bomb\"></i>';\n\n                    gameSelf.gameOver(SWEEPER.Game.GAME_OVER_LOST);\n                }\n                this.setAttribute('opened', true);\n                break;\n        }\n\n        gameSelf.checkGameStatus();\n    };\n\n    return mine;\n};\n\n/**\n * Check whether the game has finished. Using the following conditions:\n * 1. All blocks that are not a mine are opened.\n * 2. All mines have been tagged correctly.\n */\nSWEEPER.Game.prototype.checkGameStatus = function ()\n{\n    var playerWon = false;\n    var numCols = this.getNumCols();\n    var numRows = this.getNumRows();\n\n    var mine;\n    for (i = 0; i < numRows * numCols; i++)\n    {\n        mine = document.getElementById('mine_' + i);\n        if (parseInt(mine.getAttribute('mine_value'), 10) === SWEEPER.Game.BLOCK_TYPE_MINE)\n        {\n            // If is a mine block\n            if (mine.getAttribute('marked') === 'false')\n            {\n                playerWon = false;\n                break;\n            }\n            else\n            {\n                playerWon = true;\n            }\n        }\n        else\n        {\n            if (mine.getAttribute('expanded') === 'false')\n            {\n                playerWon = false;\n                break;\n            }\n            else\n            {\n                playerWon = true;\n            }\n        }\n    }\n\n    if (playerWon)\n    {\n        this.gameOver(SWEEPER.Game.GAME_OVER_WIN);\n    }\n};\n\n\n/**\n * @param {number} result\n */\nSWEEPER.Game.prototype.gameOver = function (result)\n{\n    var title, message, state;\n    switch (result)\n    {\n        case SWEEPER.Game.GAME_OVER_WIN:\n            this.faceButton.innerHTML = '<i class=\"fa fa-star\"></i>';\n            title = 'Well done!';\n            message = 'You cleared ' + this.getNumMines() + ' mines in only ' + this.timeCount + ' seconds';\n            state = 'success';\n            break;\n        case SWEEPER.Game.GAME_OVER_LOST:\n            this._expandAll();\n            this.faceButton.innerHTML = '<i class=\"fa fa-bomb\"></i>';\n            title = 'You lost!';\n            message = 'You failed to clear ' + this.getNumMines() + ' mines, please try again!';\n            state = 'error';\n            break;\n        case SWEEPER.Game.GAME_OVER_TIMEOUT:\n            this._expandAll();\n            this.faceButton.innerHTML = '<i class=\"fa fa-bomb\"></i>';\n            title = 'You ran out of time!';\n            message = 'Whoa! It really takes you that long? Try again!';\n            state = 'error';\n            break;\n    }\n\n    swal({title: title, text: message, icon: state});\n\n    // Reset stuff\n    clearInterval(this.timerId);\n    this.isGameStarted = false;\n    this.isGameFinished = true;\n};\n\n/**\n * Handles the time spent playing.\n * @returns {boolean}\n * @private\n */\nSWEEPER.Game.prototype._beginTimer = function ()\n{\n    if (this.isGameStarted)\n    {\n        return false;\n    }\n    var gameSelf = this;\n    this.timerId = window.setInterval(function ()\n    {\n        gameSelf.timeCount++;\n        if (gameSelf.timeCount > 999)\n        {\n            gameSelf.gameOver(SWEEPER.Game.GAME_OVER_TIMEOUT);\n        }\n        else\n        {\n            gameSelf.rightBox.innerText = gameSelf.timeCount.toString();\n        }\n    }, 1000);\n    this.isGameStarted = true;\n    return true;\n};\n\n/**\n * @param {number} source\n * @returns {null}\n * @private\n */\nSWEEPER.Game.prototype._expandMineArea = function (source)\n{\n    source = parseInt(source, 10);\n\n    var numCols = this.getNumCols();\n    var numRows = this.getNumRows();\n    var i, j, index, tempValue;\n\n    j = source % numCols;\n    i = Math.round((source - j) / numCols);\n\n    mine = document.getElementById('mine_' + source);\n    if ((mine.getAttribute('marked') === 'true') ||\n        (mine.getAttribute('expanded') === 'true') ||\n        (mine.getAttribute('detected') === 'true'))\n    {\n        return null;\n    }\n\n    tempValue = parseInt(mine.getAttribute('mine_value'), 10);\n    switch (tempValue)\n    {\n        case SWEEPER.Game.BLOCK_TYPE_DEFAULT:\n            mine.className = 'mine_down';\n            if (mine.getAttribute('expanded') === 'true')\n            {\n                return null;\n            }\n            mine.setAttribute('expanded', true);\n\n            // Row (i)\n            // (i, j - 1)\n            if ((j - 1) >= 0)\n            {\n                index = numCols * i + j - 1;\n                this._expandMineArea(index);\n            }\n\n            // (i, j + 1)\n            if ((j + 1) < numCols)\n            {\n                index = numCols * i + j + 1;\n                this._expandMineArea(index);\n            }\n            // Row (i - 1)\n            if ((i - 1) >= 0)\n            {\n                // (i - 1, j)\n                index = numCols * (i - 1) + j;\n                this._expandMineArea(index);\n\n                // (i - 1, j - 1)\n                if ((j - 1) >= 0)\n                {\n                    index = numCols * (i - 1) + j - 1;\n                    this._expandMineArea(index);\n                }\n\n                // (i - 1, j + 1)\n                if ((j + 1) < numCols)\n                {\n                    index = numCols * (i - 1) + j + 1;\n                    this._expandMineArea(index);\n                }\n            }\n            // Row (i + 1)\n            if ((i + 1) < numRows)\n            {\n                // (i + 1, j)\n                index = numCols * (i + 1) + j;\n                this._expandMineArea(index);\n\n                // (i + 1, j - 1)\n                if ((j - 1) >= 0)\n                {\n                    index = numCols * (i + 1) + j - 1;\n                    this._expandMineArea(index);\n                }\n                // (i + 1, j + 1)\n                if ((j + 1) < numCols)\n                {\n                    index = numCols * (i + 1) + j + 1;\n                    this._expandMineArea(index);\n                }\n            }\n            break;\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n            mine.className = 'mine_down_' + tempValue;\n            mine.innerText = tempValue.toString();\n            mine.setAttribute('expanded', true);\n            break;\n        case SWEEPER.Game.BLOCK_TYPE_MINE:\n            break;\n    }\n\n    return null;\n};\n\nSWEEPER.Game.prototype._expandAll = function ()\n{\n    var i, tempValue, mine;\n    var numCols = this.getNumCols();\n    var numRows = this.getNumRows();\n    var accumulate = numCols * numRows;\n\n    for (i = 0; i < accumulate; i++)\n    {\n        mine = document.getElementById('mine_' + i);\n        tempValue = parseInt(mine.getAttribute('mine_value'), 10);\n        if (mine.getAttribute('expanded') === 'false')\n        {\n            switch (tempValue)\n            {\n                case SWEEPER.Game.BLOCK_TYPE_MINE:\n                    // Keep flag if tagged correctly\n                    if (mine.getAttribute('marked') === 'true')\n                    {\n                        mine.className = 'mine_down_bomb';\n                        break;\n                    }\n                    // Show a mine flag otherwise\n                    if (mine.hasChildNodes())\n                    {\n                        mine.removeChild(mine.firstChild);\n                    }\n                    mine.className = 'mine_down_bomb';\n\n                    // Bomb\n                    mine.innerHTML = '<i class=\"fa fa-bomb\"></i>';\n\n                    mine.setAttribute('expanded', true);\n                    break;\n            }\n\n            // If flag is wrong then show the error icon\n            if (mine.getAttribute('marked') === 'true' && tempValue !== SWEEPER.Game.BLOCK_TYPE_MINE)\n            {\n                if (mine.hasChildNodes())\n                {\n                    mine.removeChild(mine.firstChild);\n                }\n                mine.className = 'mine_down_bomb';\n                mine.innerText = '';\n\n                // Error\n                mine.innerHTML = '<i class=\"fa fa-times\"></i>';\n\n                mine.setAttribute('expanded', true);\n            }\n        }\n    }\n};\n\n/**\n * Initialise the mining area.\n * @param {number} numRows\n * @param {number} numCols\n * @param {number} numMines\n * @param {number|undefined} mineIndex\n * @private\n */\nSWEEPER.Game.prototype._initMineArea = function (numRows, numCols, numMines, mineIndex)\n{\n    var accumulate = numRows * numCols;\n    var minesArray = new Array(accumulate);\n    var minesPos = new Array(accumulate);\n\n    var i, j, k, l, index;\n    var cur = 0; // TODO: CHECK IF NEEDED?\n\n    // Init to self index\n    for (i = 0; i < accumulate; i++)\n    {\n        minesPos[i] = i;\n    }\n\n    // Generate the random mine area\n    for (i = 0; i < (2 * accumulate); i++)\n    {\n        // Generate two positions that between 0 and accumulate\n        k = Math.round(Math.random() * accumulate);\n        l = Math.round(Math.random() * accumulate);\n        // Exchange the two positions\n        var temp = minesPos[k];\n        minesPos[k] = minesPos[l];\n        minesPos[l] = temp;\n    }\n\n    // Init the minesArray to default (nothing)\n    for (i = 0; i < numRows; i++)\n    {\n        for (j = 0; j < numCols; j++)\n        {\n            index = numCols * i + j;\n            minesArray[index] = SWEEPER.Game.BLOCK_TYPE_DEFAULT;\n        }\n    }\n\n    /**\n     * SPECIAL CONDITION: If first click is a mine, regenerate the mine area, by putting the first\n     * click index to the end of random array.\n     */\n    if (mineIndex)\n    {\n        for (i = 0; numMines; i++)\n        {\n            if (minesPos[i] === mineIndex)\n            {\n                var curPos = minesPos[i];\n                minesPos[i] = minesPos[accumulate];\n                minesPos[accumulate] = curPos;\n                break;\n            }\n        }\n    }\n\n    // Set the mines' positions\n    for (i = 0; i < numMines; i++)\n    {\n        minesArray[minesPos[i]] = SWEEPER.Game.BLOCK_TYPE_MINE;\n    }\n\n    // Generate the number beside a mine\n    for (i = 0; i < numRows; i++)\n    {\n        for (j = 0; j < numCols; j++)\n        {\n            index = numCols * i + j;\n            // If there is a mine\n            if (minesArray[index] === SWEEPER.Game.BLOCK_TYPE_MINE)\n            {\n                // Row (i)\n                // (i, j - 1)\n                if ((j - 1) >= 0)\n                {\n                    index = numCols * i + j - 1;\n                    if (minesArray[index] !== SWEEPER.Game.BLOCK_TYPE_MINE)\n                    {\n                        minesArray[index]++;\n                    }\n                }\n                // (i, j + 1)\n                if ((j + 1) < numCols)\n                {\n                    index = numCols * i + j + 1;\n                    if (minesArray[index] !== SWEEPER.Game.BLOCK_TYPE_MINE)\n                    {\n                        minesArray[index]++;\n                    }\n                }\n\n                // Row (i - 1)\n                if ((i - 1) >= 0)\n                {\n                    // (i - 1, j)\n                    index = numCols * (i - 1) + j;\n                    if (minesArray[index] !== SWEEPER.Game.BLOCK_TYPE_MINE)\n                    {\n                        minesArray[index]++;\n                    }\n                    // (i - 1, j - 1)\n                    if ((j - 1) >= 0)\n                    {\n                        index = numCols * (i - 1) + j - 1;\n                        if (minesArray[index] !== SWEEPER.Game.BLOCK_TYPE_MINE)\n                        {\n                            minesArray[index]++;\n                        }\n                    }\n                    // (i - 1, j + 1)\n                    if ((j + 1) < numCols)\n                    {\n                        index = numCols * (i - 1) + j + 1;\n                        if (minesArray[index] !== SWEEPER.Game.BLOCK_TYPE_MINE)\n                        {\n                            minesArray[index]++;\n                        }\n                    }\n                }\n\n                // Row (i + 1)\n                if ((i + 1) < numRows)\n                {\n                    // (i + 1, j)\n                    index = numCols * (i + 1) + j;\n                    if (minesArray[index] !== SWEEPER.Game.BLOCK_TYPE_MINE)\n                    {\n                        minesArray[index]++;\n                    }\n                    // (i + 1, j - 1)\n                    if ((j - 1) >= 0)\n                    {\n                        index = numCols * (i + 1) + j - 1;\n                        if (minesArray[index] !== SWEEPER.Game.BLOCK_TYPE_MINE)\n                        {\n                            minesArray[index]++;\n                        }\n                    }\n                    // (i + 1, j + 1)\n                    if ((j + 1) < numCols)\n                    {\n                        index = numCols * (i + 1) + j + 1;\n                        if (minesArray[index] !== SWEEPER.Game.BLOCK_TYPE_MINE)\n                        {\n                            minesArray[index]++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return minesArray;\n};\n\n\n\n\n"]}